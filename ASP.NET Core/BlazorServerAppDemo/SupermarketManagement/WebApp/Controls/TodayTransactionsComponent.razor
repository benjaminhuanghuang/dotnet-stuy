@inject IGetTodayTransactionsUseCase GetTodayTransactionsUseCase;
@if (transactions != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Cashier Name</th>
                <th>Product Name</th>
                <th>Date Time</th>
                <th>Qty Before</th>
                <th>Qty Sold</th>
                <th>Qty After</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trans in transactions)
            {
                <tr>
                    <td>@trans.CashierName</td>
                    <td>@trans.ProductName</td>
                    <td>@trans.Timestamp.ToString("MMdd")</td>
                    <td>@trans.BeforeQty</td>
                    <td>@trans.SoldQty</td>
                    <td>@(trans.BeforeQty - trans.SoldQty)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Transaction> transactions;
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    public void LoadTransactions(string cashierName)
    {
        transactions = GetTodayTransactionsUseCase.Execute(cashierName);
        StateHasChanged(); // important
    }

}
