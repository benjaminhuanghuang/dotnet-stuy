@inject IViewCategoriesUseCase ViewCategoriesUseCase;
@inject IViewProductsByCategoryId ViewProductsByCategoryId;

<h3>SelectProductForSellingComponent</h3>

<div class="form-group">
    <label for="category">Category</label>
    <select id="category" class="form-control" @bind="selectedCategoryId">
        <option selected></option>
        @foreach (var category in categories)
        {
            <option value="@category.CategoryId">@category.Name</option>
        }
    </select>
</div>
@if (productsInCategory != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Prict</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productsInCategory)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@Math.Round(product.Price.Value, 2)</td>
                    <td>@product.Quantity</td>

                </tr>
            }
        </tbody>
    </table>
}
@code {
    private IEnumerable<Product> productsInCategory;

    private int _selectedCategoryId;

    private int selectedCategoryId
    {
        get
        {
            return _selectedCategoryId;
        }
        set
        {
            _selectedCategoryId = value;
            productsInCategory = ViewProductsByCategoryId.Execute(_selectedCategoryId);
        }
    }


    private IEnumerable<Category> categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        categories = ViewCategoriesUseCase.Execute();
    }
}
