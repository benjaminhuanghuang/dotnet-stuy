

@page "/editcategory/{categoryId}"

@inject NavigationManager NavigationManager
@inject UseCases.UseCaseInterfaces.IEditCategoryUseCase EditCategoryUseCase
@inject UseCases.UseCaseInterfaces.IGetCategoryByIdUseCase GetCategoryByIdUseCase

<h3>Edit Category</h3>

@if (category != null)
{
    <EditForm Model="category" class="form-inline" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" class="form-control" @bind-Value="category.Name" />
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" class="form-control" @bind-Value="category.Description" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-primary" onclick="OnCancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public string CategoryId
    {
        get; set;
    }

    private Category category;



    protected override void OnInitialized()
    {
        base.OnInitialized();

        category = new Category();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(CategoryId, out int iCategoryId)){
            this.category = GetCategoryByIdUseCase.GetCategoryById(iCategoryId);
        }
    }

    private void OnValidSubmit()
    {
        EditCategoryUseCase.Execute(this.category);
        NavigationManager.NavigateTo("/categories");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/categories");
    }
}
